# 1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:

# >>> num_translate("one")
# "один"
# >>> num_translate("eight")
# "восемь"

def num_translate(arg1):
    numbers = {
    "one" : 'один',
    "two" : 'два',
    "three" : 'три',
    "four" : 'четыре',
    "five" : 'пять',
    "six" : 'шесть',
    "seven" : 'семь',
    "eight" : 'восемь',
    "nine" : 'девять',
    "ten" : 'десять',
    }
    result = numbers.get(arg1) if arg1 in numbers else None
    return result

print(num_translate('six'))

# Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию, 
# необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.

# 2. * (вместо задачи 1) Доработать предыдущую функцию в num_translate_adv(): реализовать корректную работу с числительными, 
# начинающимися с заглавной буквы — результат тоже должен быть с заглавной. Например:

# >>> num_translate_adv("One")
# "Один"
# >>> num_translate_adv("two")
# "два"

def num_translate_adv(arg1):
    flag = True if arg1.istitle() else False
    tmp_key = arg1.lower()
    numbers = {
    "one" : 'один',
    "two" : 'два',
    "three" : 'три',
    "four" : 'четыре',
    "five" : 'пять',
    "six" : 'шесть',
    "seven" : 'семь',
    "eight" : 'восемь',
    "nine" : 'девять',
    "ten" : 'десять',
    }
    tmp = numbers.get(tmp_key) if tmp_key in numbers else None
    result = tmp.title() if flag == True else tmp
    return result

print(num_translate_adv('Six'))

# 3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь, в котором ключи — 
# первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы. Например:

# >>>  thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": ["Иван", "Илья"], 
#     "М": ["Мария"], "П": ["Петр"]
# }

def thesaurus(*args):
    members = { }
    tmp = list(args)
    tmp.sort()
    for el in tmp:
        key = el[0]
        if key not in members:
            members[key] = []
        members[key].append(el)
    print(members)
    
thesaurus("Иван", "Мария", "Петр", "Илья")


# Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется сортировка по ключам? 
# Можно ли использовать словарь в этом случае?


# 4. * (вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в 
# формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, реализованные по схеме 
# предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы. Например:

# >>>thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": ["Петр Алексеев"]
#     }, 
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"], 
#         "А": ["Анна Савельева"]
#     }
# }


# Как поступить, если потребуется сортировка по ключам?
# 5. Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из трех случайных слов, взятых из трёх списков 
# (по одному из каждого):

# nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
# adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
# adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]

#         Например:

def get_jokes(jokes = 1):
    import random
    res = ''
    res_dict = []
    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
    i = 0
    while i != jokes:
        tmp = []
        tmp.append(nouns.pop(random.randint(1, jokes)))
        tmp.append(adverbs.pop(random.randint(1, jokes)))
        tmp.append(adjectives.pop(random.randint(1, jokes)))
        i += 1
        tmp_el = ' '.join(tmp)
        res = f'{tmp_el}'
        res_dict += [res]
    return res_dict

print(get_jokes(2))
# >>> get_jokes(2)
# ["лес завтра зеленый", "город вчера веселый"]

# Документировать код функции.
# Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы слов в шутках 
# (когда каждое слово можно использовать только в одной шутке)? Сможете ли вы сделать аргументы именованными?
# Задачи со * предназначены для продвинутых учеников, которым мало сделать обычное ДЗ.



# ------------------------------------------------

# pract:

